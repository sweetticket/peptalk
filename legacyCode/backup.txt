SIGNIN html

<template name="Signin">
<div id="SigninModal" class="modal fade">
  <div class="modal-dialog">
    <div class="modal-content">  
      <div class="modal-header default-modal-header">
        <h4 class="modal-title">Sign In</h4>
      </div>
      {{> SigninForm}}
    </div>
  </div>
</div>
</template>


<template name="SigninForm">
  <form id="sign-in-form">
    <div class="modal-body container signin-body">

      Please login with your @cornell.edu cmail

      <p class="signin_error error_message">
        {{ loginErrorMessage }}
      </p>

      <button type="submit" class="btn btn-primary">Sign In with Cmail</button> 
      <button type="button" class="btn btn-default cancel-btn" data-dismiss="modal">Cancel</button>
      
      <div class="row">
        <!-- <div class="col-md-2"><label for="signin-netid">Cornell NetID</label></div>
        <div class="col-md-2"><input type="text" id="signin-netid"></div> -->
      </div>
<!--       <div class="row">
      <div class="col-md-2"><label for="signin-password">Password</label></div>
      <div class="col-md-2"><input type="password" id="signin-password"></div>
      </div> -->
    </div>
    <div class="modal-footer">
      <!-- <button type="button" class="btn btn-default forgot-pw-btn">Forgot Password</button> -->

    </div>
  </form>

  <!-- hidden at first -->
<!--   <form id="forgot-password-form" class="none">
    <div class="modal-body container signin-body">
        <p class="forgot-sent success_message"></p>
      <p class="signin_error error_message"></p>
      <div class="row">
      <div class="col-md-2"><label for="signin-netid">Cornell NetID</label></div>
      <div class="col-md-2"><input class="forgot-pw-email" type="text" id="signin-netid"></div>
      </div>
    </div> -->
<!--
    <div class="modal-footer">
      <button type="button" class="btn btn-default cancel-btn" data-dismiss="modal">Cancel</button>
      <button type="submit" class="btn btn-primary send-new-pw">Send email</button>
    </div>
-->
  <!-- must hide it again if "SIGN IN" link is clicked -->
</template>


<!-- 
<template name="Verify">
    <div id="VerifyModal" class="modal fade">
  <div class="modal-dialog">
    <div class="modal-content">  
      <div class="modal-header default">
        <h4 class="modal-title">Verification Required</h4>
      </div>
            <div class="modal-body container signin-body">
            <p>You must verify your account. Please check your email.</p>
            </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-default cancel-btn" data-dismiss="modal">Dismiss</button>
        </div>
    </div>
  </div>
</div>
</template> -->


<!-- 
<template name="Verify">
    <div id="VerifyModal" class="modal fade">
  <div class="modal-dialog">
    <div class="modal-content">  
      <div class="modal-header default">
        <h4 class="modal-title">Verification Required</h4>
      </div>
            <div class="modal-body container signin-body">
            <p>You must verify your account. Please check your email.</p>
            </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-default cancel-btn" data-dismiss="modal">Dismiss</button>
        </div>
    </div>
  </div>
</div>
</template> -->

signup.js

// // Validate username, sending a specific error message on failure.
// Accounts.validateNewUser(function (user) {
//   if (user.username && user.username.length >= 3)
//     return true;
//   throw new Meteor.Error(403, "Username must have at least 3 characters");
// });
// // Validate username, without a specific error message.
// Accounts.validateNewUser(function (user) {
//   return user.username !== "root";
// });


if (Meteor.isClient) {

  // Template.SignupForm.events({
  //   'submit form': function(event, template){
  //     event.preventDefault();
  //     var netIDVar = template.find('#signup-netid').value.trim();
  //     var passwordVar = template.find('#signup-password').value;
  //     var passwordConfirmVar = template.find("#signup-password-confirm").value;
  //     if (netIDVar == "") {
  //       $(".signup_error").text("Username may not be empty.");
  //     }else if (!isValid(netIDVar)) {
  //       $(".signup_error").text("Username may not contain special characters.");
  //     }else{
  //       if (passwordVar == passwordConfirmVar) {      
  //         Accounts.createUser({
  //           email: netIDVar + "@cornell.edu",
  //           password: passwordVar,
  //           username: netIDVar
  //         }, function(err){
  //           debugger
  //           if (err) {
  //             switch (err.reason) {
  //               case "Username already exists.":
  //                 $(".signup_error").text("A user with that NetID already exists.");
  //                 break;
  //               case "Email already exists.":
  //                 $(".signup_error").text("A user with that NetID already exists.");
  //                 break;
  //               case "Password may not be empty":
  //                 $(".signup_error").text("Password may not be empty.");
  //                 break;
  //               default:
  //                 alert("some error happend");
  //             }
  //           } else {
  //             $('.modal').modal('hide');  
  //           }
  //         });
  //       } else{
  //         $(".signup_error").text("Passwords do not match.");
  //       } 
  //     }
  //     return false;
  //     //Meteor.loginWithPassword(netIDVar, passwordVar);
  //   },
  //   'click .cancel-btn': function(event){
  //     $(".error_message").text("");
  //     $("input").val("");
  //   }
  // });

  // Template.Signup.events({
  //   'shown.bs.modal #SignupModal': function(event) {
  //     $('#signup-netid').focus();
  //   }
  // });

  Template.Signin.events({
    'hidden.bs.modal #SigninModal': function(event) {
      //FIXME: remove unnecessary code below
      $('form#forgot-password-form').hide();
      $('.forgot-pw-modal-header').hide();
      $('.default-modal-header').show();
      $('form#sign-in-form').show();

      if (Session.get("redirectAddr")) {
        Router.go(Session.get("redirectAddr"));
      }
    },

    'shown.bs.modal #SigninModal': function(event) {
      $('#signin-netid').focus();
    }

  });
  
/*  Template.SigninForm.events({
    'submit form#sign-in-form': function(event, template){
      event.preventDefault();
      var netIDVar = template.find('#signin-netid').value;
      var passwordVar = template.find('#signin-password').value;
      Meteor.loginWithPassword(netIDVar+"@cornell.edu", passwordVar, function(err){
        if (err) {
          switch (err.reason) {
            case "User not found":
              $(".signin_error").text("User not found.");
                break;
            case "Incorrect password":
              $(".signin_error").text("Incorrect password.");
                break;
            default:
              alert("some error happend");
          }
        } else {
          $('.modal').modal('hide');  
        }
      });
    },
    'click .cancel-btn': function(event){
      $(".error_message").text("");
      $("input").val("");
    },
    'click .forgot-pw-btn': function(event, target) {
      $('#sign-in-form').hide();
      $('.default-modal-header').hide();
      $('.forgot-pw-modal-header').show();
      $('#forgot-password-form').show();
    },

    'submit #forgot-password-form': function(e, target) {
      e.preventDefault();
      var forgotPasswordForm = $(e.currentTarget);
      var email = $('.forgot-pw-email').val().toLowerCase() + "@cornell.edu";

      if (email && isValidEmail(email)) {
        Accounts.forgotPassword({email: email}, function(err) {
          if (err) {
            if (err.message === 'User not found [403]') {
              console.log('This email does not exist.');
            } else {
              console.log('We are sorry but something went wrong.');
            }
          } else {
            console.log('Email Sent. Check your mailbox.');
            $('.forgot-sent').text("Email sent. Check your mailbox.");
          }
        });
      }
      return false;
    }
  });
*/

  Template.SigninForm.helpers({
    'loginErrorMessage': function() {
      if (Session.get("loginErrorMessage")) {
        var loginErrorMessage = Session.get("loginErrorMessage");
        delete Session.keys['loginErrorMessage'];
        return loginErrorMessage;
      }
      return "";
    }
  });
  
  Template.SigninForm.rendered = function() {
    this.autorun(function() {
      if (Session.get("openSignInModal")) {
        delete Session.keys["openSignInModal"];
        $('#SigninModal').modal('show');
      }
    })
  }

  Template.SigninForm.events({
    'submit form#sign-in-form': function(event, template){
      event.preventDefault();

      // var netIDVar = $('#signin-netid').val();

      Meteor.loginWithGoogle({
        requestPermissions: ['email'],
        // userEmail: netIDVar+"@cornell.edu",
        forceApprovalPrompt: true
      }, function(err) {
        // Optional callback. Called with no arguments on success, or with a 
        // single Error argument on failure. The callback cannot be called if 
        // you are using the "redirect" loginStyle, because the app will have 
        // reloaded in the meantime; try using client-side login hooks instead.

        if (err) {
          if (err.reason == '@cornell.edu email required') {
            Session.set('loginErrorMessage', 'Please login with your @cornell.edu email' || 'Unknown error');
          }
          console.log("login error:", err);
          debugger
          return false;
        }

        $('.modal').one('hidden.bs.modal', function() {
          if (Meteor.user() && Meteor.user().isNew) {
            Session.set('welcomeMessage', 'Welcome! You should make your username more creative and anonymous than your NetID.');
            Meteor.call('setIsNew');
            Router.go("/users/"+Meteor.user()._id+"/edit")
          }
        });

        $('.modal').modal('hide');

        


        // This might be a faster/better way because it renders on client instantly
        // var userInfo = Meteor.user().services.google;
        // var email = userInfo.email;
        // var netId = cutEmailDomain(email);
        // Meteor.call('setNecessaryFields', netId, email);


        // debugger
        // if (err) {
        //   switch (err.reason) {
        //     case "User not found":
        //       $(".signin_error").text("User not found.");
        //         break;
        //     case "Incorrect password":
        //       $(".signin_error").text("Incorrect password.");
        //         break;
        //     default:
        //       alert("some error happend");
        //   }
        // } else {
        //   $('.modal').modal('hide');  
        // }

      });
    },
    'click .cancel-btn': function(event){
      $(".error_message").text("");
      $("input").val("");
    },
    'click .forgot-pw-btn': function(event, target) {
      $('#sign-in-form').hide();
      $('.default-modal-header').hide();
      $('.forgot-pw-modal-header').show();
      $('#forgot-password-form').show();
    },

    'submit #forgot-password-form': function(e, target) {
      e.preventDefault();
      var forgotPasswordForm = $(e.currentTarget);
      var email = $('.forgot-pw-email').val().toLowerCase() + "@cornell.edu";

      if (email && isValidEmail(email)) {
        Accounts.forgotPassword({email: email}, function(err) {
          if (err) {
            if (err.message === 'User not found [403]') {
              console.log('This email does not exist.');
            } else {
              console.log('We are sorry but something went wrong.');
            }
          } else {
            console.log('Email Sent. Check your mailbox.');
            $('.forgot-sent').text("Email sent. Check your mailbox.");
          }
        });
      }
      return false;
    }
  });
}